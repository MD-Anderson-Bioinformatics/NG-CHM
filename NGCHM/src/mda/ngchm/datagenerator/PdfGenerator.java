/*******************************************************************
 * CLASS: PdfGenerator
 *
 * This class instantiates an PdfGenerator object for use in generating
 * a PDF version of the heat map being generated by the 
 * HeatmapDataGenerator process. 
 * 
 * Author: Mark Stucky
 * Date: March 8, 2016
 ******************************************************************/

package mda.ngchm.datagenerator;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.util.Base64;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

import javax.imageio.ImageIO;

import static mda.ngchm.datagenerator.ImportConstants.*;

public class PdfGenerator { 
	private int rowClassAdjustment = 0;

	/*******************************************************************
	 * METHOD: createHeatmapPDF
	 *
	 * This method is the main driver for generating a heat map PDF 
	 * document using the PdfBox library.  A page is created for each 
	 * data layer and a legend page is created at the end of the PDF.
	 ******************************************************************/
	public void createHeatmapPDF(ImportData iData, boolean fullPDF) {
		PDDocument doc = null;
		BufferedImage image;
		try {
		    doc = new PDDocument();
		    String full = "";
			for (int i=0; i < iData.matrixImages.size(); i++) {
				image = iData.matrixImages.get(i); 
				if (fullPDF) {
					createFullPDFHeatmapPage(doc,image,iData);
					full = "_exp";
				} else {
					createPDFHeatmapPage(doc, image, iData);
				}
			}
			if ((iData.rowData.getVisibleClasses().size() > 0) || (iData.colData.getVisibleClasses().size() > 0)) {
				createPDFLegendPage(doc, iData);
			}
		    doc.save(iData.outputDir+File.separator+iData.chmName+full+".pdf");
		    doc.close();
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.createHeatmapPDF: " + ex.toString());
	        ex.printStackTrace();
		} finally {
		    if( doc != null ) {
		    	try {
			        doc.close();
		    	} catch (Exception ex) {
		    		//do nothing}
		    	}
		    }
		}
	}	
	
	public PDPageContentStream getPdfPage(PDDocument doc, ImportData iData) throws Exception {
        PDPage page = new PDPage();
        doc.addPage(page);
        PDPageContentStream contentStream = new PDPageContentStream(doc, page);
        //Write header and footer to PDF Document
        drawHeaderFooter(doc, contentStream, iData.chmName, US_LETTER_WIDTH, US_LETTER_HEIGHT);
		return contentStream;
	}
	
	public PDPageContentStream getPdfPageCustomSize(PDDocument doc, ImportData iData, int mapWidth, int mapHeight) throws Exception {
		int pageWidth = PDF_DENDRO_HEIGHT + mapWidth + 300;
		int pageHeight = PDF_CONTENT_START + PDF_DENDRO_HEIGHT + mapHeight + 300;
		PDRectangle pageDim = new PDRectangle(pageWidth, pageHeight); 
        PDPage page = new PDPage(pageDim);
        doc.addPage(page);
        PDPageContentStream contentStream = new PDPageContentStream(doc, page);
        //Write header and footer to PDF Document
        drawHeaderFooter(doc, contentStream, iData.chmName,pageWidth, pageHeight);
		return contentStream;
	}
   
	public void createPDFHeatmapPage(PDDocument doc, BufferedImage image, ImportData iData) {
		try {
            PDPageContentStream contentStream = getPdfPage(doc, iData);
            int[] rowColPos = getStartingPositions(iData,US_LETTER_HEIGHT);
            //Draw row dendrogram on PDF
            if (iData.colData.dendroMatrix != null) {
	            rowColPos = drawColumnDendrogram(doc, contentStream, iData, rowColPos, PDF_MAP_SIZE);
            }
            //Draw column covariates on PDF
            rowColPos = drawColumnCovariates(doc, contentStream, iData, rowColPos, PDF_MAP_SIZE);
            //Draw row dendrogram on PDF
            rowColPos[PDF_ROW_POS] -= PDF_MAP_SIZE;
            if (iData.rowData.dendroMatrix != null) {
                rowColPos = drawRowDendrogram(doc, contentStream, iData, rowColPos, PDF_MAP_SIZE);
            }
            //Draw row covariates on PDF
            rowColPos = drawRowCovariates(doc, contentStream, iData, rowColPos, PDF_MAP_SIZE);
            //Draw heat map on PDF
            PDImageXObject  pdImageXObject = LosslessFactory.createFromImage(doc, image);
            contentStream.drawImage(pdImageXObject, rowColPos[PDF_COL_POS], rowColPos[PDF_ROW_POS], PDF_MAP_SIZE, PDF_MAP_SIZE);
            if (iData.rowData.topItems != null) {
                rowColPos = drawRowTopItems(doc, contentStream, iData, rowColPos);
            }
            if (iData.colData.topItems != null) {
            	rowColPos = drawColTopItems(doc, contentStream, iData, rowColPos);
            }
            contentStream.close();
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.createPDFHeatmapPage: " + ex.toString());
	        ex.printStackTrace();
		} 
	}	
	

	public void createFullPDFHeatmapPage(PDDocument doc, BufferedImage image, ImportData iData) {
		try {
			int mapWidth = iData.colData.classArray.length*5-5;
			int mapHeight = iData.rowData.classArray.length*5-5;
            PDPageContentStream contentStream = getPdfPageCustomSize(doc, iData, mapWidth, mapHeight);
            int[] rowColPos = getStartingPositions(iData,PDF_CONTENT_START + PDF_DENDRO_HEIGHT + mapHeight + 300);
            //Draw row dendrogram on PDF
            if (iData.colData.dendroMatrix != null) {
	            rowColPos = drawColumnDendrogram(doc, contentStream, iData, rowColPos, mapWidth);
            }
            //Draw column covariates on PDF
            rowColPos = drawColumnCovariates(doc, contentStream, iData, rowColPos, mapWidth);
            //Draw row dendrogram on PDF
            rowColPos[PDF_ROW_POS] -= mapHeight;
            if (iData.rowData.dendroMatrix != null) {
                rowColPos = drawRowDendrogram(doc, contentStream, iData, rowColPos, mapHeight);
            }
            //Draw row covariates on PDF
            rowColPos = drawRowCovariates(doc, contentStream, iData, rowColPos, mapHeight);
            //Draw all the col labels
            rowColPos = drawAllColLabels(doc, contentStream, iData, rowColPos);
            //Draw all the row labels
            rowColPos = drawAllRowLabels(doc, contentStream, iData, rowColPos, mapWidth, mapHeight);
            //Draw heat map on PDF
            PDImageXObject  pdImageXObject = LosslessFactory.createFromImage(doc, image);
            contentStream.drawImage(pdImageXObject, rowColPos[PDF_COL_POS], rowColPos[PDF_ROW_POS], mapWidth, mapHeight);
            createPDFDataDistributionPlot(doc, iData);
            contentStream.close();
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.createPDFHeatmapPage: " + ex.toString());
	        ex.printStackTrace();
		} 
	}	
	
	public int[] getStartingPositions(ImportData iData, int pageHeight) {
        int[] rowColPos = new int[2];
        try {
	        rowColPos[PDF_ROW_POS] = pageHeight - PDF_CONTENT_START;
	    	List<InputClass> icList = iData.rowData.getVisibleClasses();
	    	int classAdj = 0;
	        for (int i = 0; i <  icList.size(); i++) {
	        	InputClass ic = icList.get(i);
	        	if (ic.barType.equals(COLOR_PLOT)) {
	        		classAdj += PDF_CLASS_HEIGHT;
	        	} else {
	        		classAdj += PDF_CLASS_HEIGHT*3;
	        	}
	        }
	        rowClassAdjustment = classAdj;
	        rowColPos[PDF_COL_POS] = 10 + classAdj+ 2;
	        if (iData.rowData.dendroMatrix != null) {
	        	 rowColPos[PDF_COL_POS] += PDF_DENDRO_HEIGHT;
	        }
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.getStartingPositions: " + ex.toString());
	        ex.printStackTrace();
		} 
        return rowColPos;
	}

	public void createPDFDataDistributionPlot(PDDocument doc, ImportData iData) {
		try {
	           PDPageContentStream contentStream = getPdfPage(doc, iData);
	           int missingCount = iData.matrixFiles.get(0).missingCount;
	           int[] countBins = iData.matrixFiles.get(0).distributionCounts;
	           float[] thresh = iData.matrixFiles.get(0).distributionBreaks;
	           int binNums = countBins.length;
	           int threshNums = thresh.length;
	           int maxCount = iData.matrixFiles.get(0).missingCount;
	           for (int a = 0; a < binNums; a++) {
	        	   if (countBins[a] > maxCount) {
	        		   maxCount = countBins[a];
	        	   }
	           }
	           int histStartY = 712;
	           writePDFText(contentStream, "Data Distribution", 12, PDF_FONT_BOLD, 10, histStartY, false);
	           histStartY -= 15;
	           PDImageXObject  pdMatrixDistributionLegend = LosslessFactory.createFromImage(doc, iData.matrixFiles.get(0).distributionLegend);
	           contentStream.drawImage(pdMatrixDistributionLegend, 50, histStartY-110, 110, 111);
	           BufferedImage breakTick = new BufferedImage(2, 1, BufferedImage.TYPE_INT_RGB);
	           breakTick.setRGB(0, 0, RGB_BLACK);
	           breakTick.setRGB(1,0,RGB_BLACK);
	           PDImageXObject pdImageBreakTick = LosslessFactory.createFromImage(doc, breakTick);
	           contentStream.drawImage(pdImageBreakTick, 48, histStartY, 2, 1);
	           contentStream.drawImage(pdImageBreakTick, 48, histStartY-100, 2, 1);
	           contentStream.drawImage(pdImageBreakTick, 48, histStartY-110, 2, 1);
	           for (int i = 0; i < threshNums; i++) {
	        	   float roundThreshK = Math.round(thresh[i]*1000);
	        	   float roundThresh = roundThreshK/1000;
	        	   PDFont font = PDF_FONT;
	        	   float textWidth = font.getStringWidth(Float.toString(roundThresh))/1000.0f * 12;
	        	   writePDFText(contentStream, Float.toString(roundThresh), 12, PDF_FONT, 45-(int) textWidth, histStartY-(i+1)*10-5, false);
	        	   writePDFText(contentStream, "n = " + Integer.toString(countBins[i]), 12, PDF_FONT, 55+(110*countBins[i]/maxCount) + 2, histStartY-(i+1)*10+1, false);
	        	   contentStream.drawImage(pdImageBreakTick, 48, histStartY-(i+1)*10, 2, 1);
	           }
	           
	           writePDFText(contentStream, "n = " + Integer.toString(countBins[binNums-1]), 12, PDF_FONT, 55+(110*countBins[binNums-1]/maxCount) + 2, histStartY-(threshNums+1)*10+1, false);
	           writePDFText(contentStream, "Missing", 12, PDF_FONT, 5, histStartY-120+10, false);
	           writePDFText(contentStream, "n = " + Integer.toString(missingCount), 12, PDF_FONT, 55+(110*missingCount/maxCount) + 2, histStartY-(binNums+1)*10+1, false);

	           contentStream.close();
			} catch (Exception ex) {
				System.out.println("Exception in PdfGenerator.createPDFLegendPage: " + ex.toString());
		        ex.printStackTrace();
			}
	}
	
	public void createPDFLegendPage(PDDocument doc, ImportData iData) {
		try {
           PDPageContentStream contentStream = getPdfPage(doc, iData);
           List<InputClass> rcFiles = iData.rowData.getVisibleClasses(); 
           List<InputClass> ccFiles = iData.colData.getVisibleClasses(); 
           BufferedImage borderBox = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);
           borderBox.setRGB(0, 0, RGB_BLACK);
           PDImageXObject pdImageBorderBox = LosslessFactory.createFromImage(doc, borderBox);
           int rowCovStartY = 712;
   		   if (rcFiles.size() > 0)  {
   			  writePDFText(contentStream, "Row Covariate Bar Legends", 12, PDF_FONT_BOLD, 10, rowCovStartY, false);
   			  rowCovStartY -= 15;
   			  float pairs = new Float(rcFiles.size())/2;
   			  int next = 0;
   			  //Get number of pairs of row class legends
   			  for (int i=0; i<pairs; i++) {
   				int legend2 = -1;
   				if ((pairs % 1) == 0) {
   					legend2 = next+1;
   				}
   				//IF legend pair fits on page, write to page ELSE create new page and write to it.
   				if (legendFitsOnPage(doc, rcFiles, contentStream, next, legend2, rowCovStartY)) {
   					rowCovStartY = writeLegend(doc, rcFiles, contentStream, next, legend2, rowCovStartY, pdImageBorderBox);
   				} else {
   					rowCovStartY = 712;
   					contentStream.close();
   					contentStream = getPdfPage(doc, iData);
   	   			    writePDFText(contentStream, "Row Covariate Bar Legends (continued)", 12, PDF_FONT_BOLD, 10, rowCovStartY, false);
   	   			    rowCovStartY -= 15;
   					rowCovStartY = writeLegend(doc, rcFiles, contentStream, next, legend2, rowCovStartY, pdImageBorderBox);
  				}
   				next += 2;
   			  }
   		   }
   		   if (ccFiles.size() > 0)  {
   			   writePDFText(contentStream, "Column Covariate Bar Legends", 12, PDF_FONT_BOLD, 10, rowCovStartY, false);
   	           rowCovStartY -= 15;
 			   float pairs = new Float(ccFiles.size())/2;
			   int next = 0;
   			   for (int i=0; i<pairs; i++) {
   				   int legend2 = -1;
   				   if ((pairs % 1) == 0) {
   					   legend2 = next+1;
   				   }
       			   if (legendFitsOnPage(doc, ccFiles, contentStream, next, legend2, rowCovStartY)) {
      					rowCovStartY = writeLegend(doc, ccFiles, contentStream, next, legend2, rowCovStartY, pdImageBorderBox);
       				} else {
       					rowCovStartY = 712;
       					contentStream.close();
       					contentStream = getPdfPage(doc, iData);
       	   			    writePDFText(contentStream, "Column Covariate Bar Legends (continued)", 12, PDF_FONT_BOLD, 10, rowCovStartY, false);
       	   			    rowCovStartY -= 15;
       					rowCovStartY = writeLegend(doc, ccFiles, contentStream, next, legend2, rowCovStartY, pdImageBorderBox);
      				}
   				   next += 2;
   			   }
   		   }
           contentStream.close();
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.createPDFLegendPage: " + ex.toString());
	        ex.printStackTrace();
		} 
	}	
   
	public int writeLegend(PDDocument doc, List<InputClass> classFiles, PDPageContentStream contentStream, int legend1, int legend2, int rowCovStartY, PDImageXObject pdImageBorderBox) {
        int legend1Rows = 0;
		try {
			int currRow = rowCovStartY;
			InputClass iFile = classFiles.get(legend1);
			String[]rowValues;
			int colStart = 0;
	        rowValues = iFile.orderedClass;
			int breakSize = iFile.map.breaks.size()+1;
	      	if (iFile.map.type.equals("continuous")) {
	      		breakSize = iFile.map.contBreaks.size()+1;
	      	}
			writePDFText(contentStream, iFile.name, 10, PDF_FONT_BOLD, colStart+14, currRow, false);
			currRow -= (breakSize*10)+5;
			//Write legend class totals to the PDF
			if (iFile.map.type.equals("continuous")) {
	  	        writeContinuousCovariateClassTotals(contentStream, iFile, rowValues, currRow, colStart);
			} else {
	  	        writeDiscreteClassTotals(contentStream, iFile, rowValues, currRow, colStart);
			}
	        //Draw covariate legend on the PDF 
			PDImageXObject  pdImageClassXObjectC = null;
			if (iFile.barType.equals(COLOR_PLOT)) {
		        pdImageClassXObjectC = LosslessFactory.createFromImage(doc, iFile.classLegend);
		        contentStream.drawImage(pdImageBorderBox, colStart+17, currRow-1, 12, (breakSize*10)+2);
		        contentStream.drawImage(pdImageClassXObjectC, colStart+18, currRow, 10, breakSize*10);
			}
	        legend1Rows = currRow;
	        currRow = rowCovStartY;
	        if (legend2 > 0) {
	        	colStart = 300;
	        	iFile = (InputClass) classFiles.get(legend2);
		        rowValues = iFile.orderedClass;
				breakSize = iFile.map.breaks.size()+1;
		      	if (iFile.map.type.equals("continuous")) {
		      		breakSize = iFile.map.contBreaks.size()+1;
		      	}
				writePDFText(contentStream, iFile.name, 10, PDF_FONT_BOLD, colStart+14, currRow, false);
				currRow -= (breakSize*10)+5;
				//Write legend class totals to the PDF
				if (iFile.map.type.equals("continuous")) {
		  	        writeContinuousCovariateClassTotals(contentStream, iFile, rowValues, currRow, colStart);
				} else {
					writeDiscreteClassTotals(contentStream, iFile, rowValues, currRow, colStart);
				}
		        //Draw covariate legend on the PDF 
				if (iFile.barType.equals(COLOR_PLOT)) {
			        pdImageClassXObjectC = LosslessFactory.createFromImage(doc, iFile.classLegend);
			        contentStream.drawImage(pdImageBorderBox, colStart+16, currRow-1, 12, (breakSize*10)+2);
			        contentStream.drawImage(pdImageClassXObjectC, colStart+17, currRow, 10, breakSize*10);
				}
		        if (currRow < legend1Rows) {
		        	legend1Rows = currRow;
		        }
	        }
	        legend1Rows -= 45;
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.writeLegend: " + ex.toString());
	        ex.printStackTrace();
		} 
		return legend1Rows;
	}
	
	public boolean legendFitsOnPage(PDDocument doc, List<InputClass> classFiles, PDPageContentStream contentStream, int legend1, int legend2, int rowCovStartY) {
		boolean itFits = true;
		try {
			int currRow = rowCovStartY;
			InputClass iFile = (InputClass) classFiles.get(legend1);
			int breakSize = iFile.map.breaks.size()+1;
	      	if (iFile.map.type.equals("continuous")) {
	      		breakSize = iFile.map.contBreaks.size()+1;
	      	}
			currRow -= (breakSize*10)+5;
	        int legend1Rows = currRow;
	        currRow = rowCovStartY;
	        if (legend2 > 0) {
	        	iFile = (InputClass) classFiles.get(legend2);
				breakSize = iFile.map.breaks.size();
		      	if (iFile.map.type.equals("continuous")) {
		      		breakSize = iFile.map.contBreaks.size();
		      	}
				currRow -= (breakSize*10)+5;
		        if (currRow < legend1Rows) {
		        	legend1Rows = currRow;
		        }
	        }
	        if (legend1Rows < 50) {
	        	itFits = false;
	        }
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.legendFitsOnPage: " + ex.toString());
	        ex.printStackTrace();
		} 
		return itFits;
	}	
		
   public void writeDiscreteClassTotals(PDPageContentStream contentStream, InputClass iFile, String[] covValues, int rowCovStartY, int colStart) {
	   try {
	   		int[] covTotals = new int[iFile.map.breaks.size()+1];
	        for (int j = 1; j < covValues.length; j++) {
	        	String elemValue = covValues[j];
	        	if ((elemValue == null) || (NA_VALUES.contains(elemValue)) ){
	        		covTotals[covTotals.length-1]++;
	        	} else if (elemValue.equals(CUT_VALUE)) {
	        		// Do nothing (no need to count the cut row/col)
	        	} else {
		        	for (int k = 0; k < iFile.map.breaks.size(); k++) {
		        		if (elemValue.equals(iFile.map.breaks.get(k))) {
		        			covTotals[k]++;
		        		}
		        	}
	        	}
	        } 
	        int revOrder = covTotals.length - 1;
	        for (int k = 0; k < covTotals.length;k++) {
	        	String breakVal;
	        	if (k == covTotals.length - 1) {
	        		breakVal = "Missing Value";
	        	} else {
	            	breakVal = iFile.map.breaks.get(k);
	        	}
	        	if (breakVal.length() > 25) {
	        		breakVal = breakVal.substring(0,25)+"...";
	        	}
			    writePDFText(contentStream, breakVal, 7, PDF_FONT, colStart+35, (rowCovStartY+2)+(10*revOrder), false);
			    writePDFText(contentStream, "n = "+ covTotals[k], 7, PDF_FONT, colStart+150, (rowCovStartY+2)+(10*revOrder), false);
			    revOrder--;
	        }
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.writeDiscreteClassTotals: " + ex.toString());
	        ex.printStackTrace();
		} 
   }
   
   public void writeContinuousCovariateClassTotals(PDPageContentStream contentStream, InputClass iFile, String[] covValues, int rowCovStartY, int colStart) throws Exception {
	   try {
		   int[] covTotals = new int[iFile.map.contBreaks.size()+1];
	       for (int j = 1; j < covValues.length; j++) {
		       	String elemValue = covValues[j];
	        	if ((elemValue == null) || (NA_VALUES.contains(elemValue)) ){
		       		covTotals[iFile.map.contBreaks.size()]++;
		       	} else if (elemValue.equals(CUT_VALUE)) {
		       		//Do nothing (no need to count the cut row/col)
		       	} else {
			       	for (int k = 0; k < iFile.map.contBreaks.size(); k++) {
						if (k == 0 && Float.valueOf(elemValue) < Float.valueOf(iFile.map.contBreaks.get(k))){
							covTotals[k]++;
						} else if (k == iFile.map.contBreaks.size() - 1 && Float.valueOf(elemValue) > Float.valueOf(iFile.map.contBreaks.get(k))){
							covTotals[k]++;
						} else if (Float.valueOf(elemValue) <= Float.valueOf(iFile.map.contBreaks.get(k))){
							covTotals[k]++;
							break;
						}
			       	}
		    	}
	       } 
	       int revOrder = covTotals.length - 1;
	       for (int k = 0; k < covTotals.length;k++) {
	        	String breakVal;
	        	if (k == covTotals.length - 1) {
	        		breakVal = "Missing Value";
	        	} else {
	            	breakVal = iFile.map.contBreaks.get(k);
	        	}
	        	if (breakVal.length() > 25) {
	        		breakVal = breakVal.substring(0,25)+"...";
	        	}
			    writePDFText(contentStream, breakVal, 7, PDF_FONT, colStart+35, (rowCovStartY+2)+(10*revOrder), false);
			    writePDFText(contentStream, "n = "+ covTotals[k], 7, PDF_FONT, colStart+150, (rowCovStartY+2)+(10*revOrder), false);
			    revOrder--;
	       }
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.writeContinuousCovariateClassTotals: " + ex.toString());
	        ex.printStackTrace();
		} 
  }
   
	public void drawHeaderFooter(PDDocument doc, PDPageContentStream contentStream, String mapName, int pageWidth, int pageHeight) {
        try {
        	//Write heatmap name to header (truncating if necessary)
        	PDFont font = PDF_FONT_BOLD;
        	int fontSize = 14;
        	float strWidth = font.getStringWidth(mapName)/1000 * fontSize;
        	float strSpace = pageWidth - 130-10;
        	while (strWidth > strSpace) { // trim down 5 letters at a time to fit space allocated for map name
	        	mapName = mapName.substring(0,mapName.length()-5) + "...";
	        	strWidth = font.getStringWidth(mapName)/1000 * fontSize;
	        }
			//Draw MDA logo on header
        	byte[] decodedBytes = Base64.getDecoder().decode("");
        	InputStream in = new ByteArrayInputStream(decodedBytes);
        	BufferedImage buffImg = ImageIO.read(in);
	        PDImageXObject  imgObj = LosslessFactory.createFromImage(doc, buffImg);
	        contentStream.drawImage(imgObj, 10, pageHeight - 52, 100, 40);
	        //Draw red bar on header
        	decodedBytes = Base64.getDecoder().decode("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/GMzLdsAAEJqaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzExMSA3OS4xNTgzMjUsIDIwMTUvMDkvMTAtMDE6MTA6MjAgICAgICAgICI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgICAgICAgICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgICAgICAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgICAgICAgICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgICAgICAgICAgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiCiAgICAgICAgICAgIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgMjAxNSAoV2luZG93cyk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTUtMTItMThUMjA6MTc6MjAtMDU6MDA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8eG1wOk1ldGFkYXRhRGF0ZT4yMDE1LTEyLTE5VDIwOjIyOjM1LTA1OjAwPC94bXA6TWV0YWRhdGFEYXRlPgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAxNS0xMi0xOVQyMDoyMjozNS0wNTowMDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDxkYzpmb3JtYXQ+aW1hZ2UvcG5nPC9kYzpmb3JtYXQ+CiAgICAgICAgIDx4bXBNTTpJbnN0YW5jZUlEPnhtcC5paWQ6NWVkMTU4NGQtOWFlZC0xZTQzLWFjNGEtMDE1ZTNmZjAxN2ZiPC94bXBNTTpJbnN0YW5jZUlEPgogICAgICAgICA8eG1wTU06RG9jdW1lbnRJRD5hZG9iZTpkb2NpZDpwaG90b3Nob3A6MTcxY2Y1NzctYTZiOC0xMWU1LWJhZGItYWFlZWUyOWFiNDU4PC94bXBNTTpEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06T3JpZ2luYWxEb2N1bWVudElEPnhtcC5kaWQ6YjlkOThkNWItZGZmNi05NTRlLWI1YmUtNTg2ZGIzOTQ4YzAwPC94bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ+CiAgICAgICAgIDx4bXBNTTpIaXN0b3J5PgogICAgICAgICAgICA8cmRmOlNlcT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+Y3JlYXRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOmI5ZDk4ZDViLWRmZjYtOTU0ZS1iNWJlLTU4NmRiMzk0OGMwMDwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAxNS0xMi0xOFQyMDoxNzoyMC0wNTowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKFdpbmRvd3MpPC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDoyNjU0MTc0NC02NTc3LTk1NDEtODQ3Ni1iMjYxYTdiMGZlMTM8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMTUtMTItMTlUMTA6NDA6MTItMDU6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE1IChXaW5kb3dzKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6ODJkZGMwZTItY2JlNy01YzQyLTkyMTQtMjc0OTM4ZjQ1NTExPC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDE1LTEyLTE5VDIwOjIyOjM1LTA1OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgQ0MgMjAxNSAoV2luZG93cyk8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPi88L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5jb252ZXJ0ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnBhcmFtZXRlcnM+ZnJvbSBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIHRvIGltYWdlL3BuZzwvc3RFdnQ6cGFyYW1ldGVycz4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmRlcml2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnBhcmFtZXRlcnM+Y29udmVydGVkIGZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9wbmc8L3N0RXZ0OnBhcmFtZXRlcnM+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOjVlZDE1ODRkLTlhZWQtMWU0My1hYzRhLTAxNWUzZmYwMTdmYjwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAxNS0xMi0xOVQyMDoyMjozNS0wNTowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKFdpbmRvd3MpPC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4vPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3htcE1NOkhpc3Rvcnk+CiAgICAgICAgIDx4bXBNTTpEZXJpdmVkRnJvbSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgIDxzdFJlZjppbnN0YW5jZUlEPnhtcC5paWQ6ODJkZGMwZTItY2JlNy01YzQyLTkyMTQtMjc0OTM4ZjQ1NTExPC9zdFJlZjppbnN0YW5jZUlEPgogICAgICAgICAgICA8c3RSZWY6ZG9jdW1lbnRJRD5hZG9iZTpkb2NpZDpwaG90b3Nob3A6YzQ1ZmVkNmYtYTY2Ni0xMWU1LTlhNzEtZjgxOGZiZGY0NjgwPC9zdFJlZjpkb2N1bWVudElEPgogICAgICAgICAgICA8c3RSZWY6b3JpZ2luYWxEb2N1bWVudElEPnhtcC5kaWQ6YjlkOThkNWItZGZmNi05NTRlLWI1YmUtNTg2ZGIzOTQ4YzAwPC9zdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ+CiAgICAgICAgIDwveG1wTU06RGVyaXZlZEZyb20+CiAgICAgICAgIDxwaG90b3Nob3A6Q29sb3JNb2RlPjM8L3Bob3Rvc2hvcDpDb2xvck1vZGU+CiAgICAgICAgIDxwaG90b3Nob3A6SUNDUHJvZmlsZT5zUkdCIElFQzYxOTY2LTIuMTwvcGhvdG9zaG9wOklDQ1Byb2ZpbGU+CiAgICAgICAgIDxwaG90b3Nob3A6RG9jdW1lbnRBbmNlc3RvcnM+CiAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICA8cmRmOmxpPnhtcC5kaWQ6QTg4MjA4QkQ4RkREMTFFMkJCMkREMjUxRUUzNTVGRDk8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaT54bXAuZGlkOkNBQjc4RUY3MDVCMDExRTM5QjgzRTNEMkVDMUJCOEU4PC9yZGY6bGk+CiAgICAgICAgICAgIDwvcmRmOkJhZz4KICAgICAgICAgPC9waG90b3Nob3A6RG9jdW1lbnRBbmNlc3RvcnM+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjk2MDAwMC8xMDAwMDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WVJlc29sdXRpb24+OTYwMDAwLzEwMDAwPC90aWZmOllSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpSZXNvbHV0aW9uVW5pdD4yPC90aWZmOlJlc29sdXRpb25Vbml0PgogICAgICAgICA8ZXhpZjpDb2xvclNwYWNlPjE8L2V4aWY6Q29sb3JTcGFjZT4KICAgICAgICAgPGV4aWY6UGl4ZWxYRGltZW5zaW9uPjExODA8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+NDUwPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz7ApqnrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAABUhSURBVHja7NyxToMAGEZRMLz/E6O/Q010K6i0N3rO0C6UNFDyLTddZ2ZmFgAAAAAAAAAAgJwXlwAAAAAAAAAAAKgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAAZAmcAAAAAAAAAACALIETAAAAAAAAAACQJXACAAAAAAAAAACyBE4AAAAAAAAAAECWwAkAAAAAAAAAAMgSOAEAAAAAAAAAAFkCJwAAAAAAAAAAIEvgBAAAAAAAAAAA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");
        	in = new ByteArrayInputStream(decodedBytes);
        	buffImg = ImageIO.read(in);
	        imgObj = LosslessFactory.createFromImage(doc, buffImg);
	        contentStream.drawImage(imgObj, 10, pageHeight - 57, pageWidth - 22, 12);
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.drawHeaderFooter: " + ex.toString());
	        ex.printStackTrace();
		} 
	}

	public int[] drawColumnDendrogram(PDDocument doc, PDPageContentStream contentStream, ImportData iData, int[] posArray, int mapWidth) {
		posArray[PDF_ROW_POS] -= PDF_DENDRO_HEIGHT;
        try {
            PDImageXObject  pdColDendroImageXObject = LosslessFactory.createFromImage(doc, iData.colData.dendroImage);
            contentStream.drawImage(pdColDendroImageXObject, posArray[PDF_COL_POS], posArray[PDF_ROW_POS], mapWidth, PDF_DENDRO_HEIGHT);
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.drawColumnDendrogram: " + ex.toString());
	        ex.printStackTrace();
		} 
        return posArray;
	}
	
	public int[] drawColumnCovariates(PDDocument doc, PDPageContentStream contentStream, ImportData iData, int[] posArray, int mapWidth) {
        try {
        	List<InputClass> icList = iData.colData.getVisibleClasses();
        	posArray[PDF_ROW_POS] -= 2;
        	boolean containsBar = false;
            for (int i = 0; i <  icList.size(); i++) {
            	InputClass icl = (InputClass) icList.get(i);
	            if (!icl.barType.equals(COLOR_PLOT)) {
	            	containsBar = true;
	            }
            }
            for (int i = 0; i <  icList.size(); i++) {
            	InputClass ic = (InputClass) icList.get(i);
	            PDImageXObject  pdImageClassXObjectC = LosslessFactory.createFromImage(doc, ic.classImage);
	            int classHeight = PDF_CLASS_HEIGHT;
	            int horizPos = posArray[PDF_COL_POS]+mapWidth+2;
	            int midPos = posArray[PDF_ROW_POS]-3;
	            if (!ic.barType.equals(COLOR_PLOT)) {
	            	classHeight = PDF_CLASS_HEIGHT*3;
	            	int topPos = posArray[PDF_ROW_POS]-i;
	            	int botPos = posArray[PDF_ROW_POS]-classHeight+2-i;
	            	midPos = botPos+((topPos-botPos)/2);
	            	writePDFText(contentStream, "-", 5, PDF_FONT_BOLD, horizPos, topPos, false);
		    		writePDFText(contentStream, "-", 5, PDF_FONT_BOLD, horizPos, midPos, false);
		    		writePDFText(contentStream, "-", 5, PDF_FONT_BOLD, horizPos, botPos, false);
		    		horizPos += 3;
	        		String midStr = String.valueOf(Math.round(Float.parseFloat(ic.lowBound)+((Float.parseFloat(ic.highBound)-Float.parseFloat(ic.lowBound))/2)));
	            	String lowStr = Float.parseFloat(ic.highBound) >= 2 ? ic.lowBound.replaceFirst("\\.0*$|(\\.\\d*?)0+$", "$1") : ic.lowBound;
	            	String highStr = Float.parseFloat(ic.highBound) >= 2 ? ic.highBound.replaceFirst("\\.0*$|(\\.\\d*?)0+$", "$1") : ic.highBound;
	            	midStr = Float.parseFloat(ic.highBound) >= 2 ? midStr.replaceFirst("\\.0*$|(\\.\\d*?)0+$", "$1") : midStr;
		    		writePDFText(contentStream, lowStr, 4, PDF_FONT_BOLD, horizPos, topPos-2, false);
		    		writePDFText(contentStream, midStr, 4, PDF_FONT_BOLD, horizPos, midPos, false);
		    		writePDFText(contentStream, highStr, 4, PDF_FONT_BOLD, horizPos, botPos+2, false);
	            	horizPos +=8;
	            } else {
	            	if (containsBar) horizPos += 11;
	            }
	            posArray[PDF_ROW_POS] -= classHeight-2;
	            contentStream.drawImage(pdImageClassXObjectC, posArray[PDF_COL_POS], posArray[PDF_ROW_POS], mapWidth, classHeight - 1);
            	String covName = ic.name;
    			covName = covName.length() > 20 ? covName.substring(0, 20)+"..." : covName;
	    		writePDFText(contentStream, covName, 5, PDF_FONT_BOLD, horizPos, midPos, false);
            }
       	    posArray[PDF_ROW_POS] -= 2;
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.drawColumnCovariates: " + ex.toString());
	        ex.printStackTrace();
		} 
        return posArray;
	}
	
	public int[] drawRowDendrogram(PDDocument doc, PDPageContentStream contentStream, ImportData iData, int[] posArray, int mapHeight) {
        try {
        	PDImageXObject  pdRowDendroImageXObject = LosslessFactory.createFromImage(doc, iData.rowData.dendroImage);
            contentStream.drawImage(pdRowDendroImageXObject, 10, posArray[PDF_ROW_POS], PDF_DENDRO_HEIGHT, mapHeight);
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.drawRowDendrogram: " + ex.toString());
	        ex.printStackTrace();
		} 
        return posArray;
	}
	
	public int[] drawRowCovariates(PDDocument doc, PDPageContentStream contentStream, ImportData iData, int[] posArray, int mapHeight) throws Exception {
    	List<InputClass> icList = iData.rowData.getVisibleClasses();
        int colStartPos = posArray[PDF_COL_POS] - (rowClassAdjustment+1);
        try {
        	boolean containsBar = false;
            for (int i = 0; i <  icList.size(); i++) {
            	InputClass icl = (InputClass) icList.get(i);
	            if (!icl.barType.equals(COLOR_PLOT)) {
	            	containsBar = true;
	            }
            }
            for (int i = 0; i <  icList.size(); i++) {
        		int vertPos = posArray[PDF_ROW_POS]-2;
            	InputClass ic = (InputClass) icList.get(i);
	            int classHeight = PDF_CLASS_HEIGHT;
	            int classLabelAdj = 2;
	        	int midPos = colStartPos+classLabelAdj;
	            if (!ic.barType.equals(COLOR_PLOT)) {
	            	classHeight = PDF_CLASS_HEIGHT*3;
	            	classLabelAdj += classHeight/2;
	            	int leftPos = colStartPos-1;
	            	int rightPos = (leftPos+classHeight)-1;
	            	midPos = leftPos+((rightPos-leftPos)/2);
	            	writePDFText(contentStream, "-", 5, PDF_FONT_BOLD, leftPos, vertPos, true);
	            	writePDFText(contentStream, "-", 5, PDF_FONT_BOLD, midPos, vertPos, true);
	            	writePDFText(contentStream, "-", 5, PDF_FONT_BOLD, rightPos, vertPos, true);
	            	vertPos -= 3;
	        		String midStr = String.valueOf(Math.round(Float.parseFloat(ic.lowBound)+((Float.parseFloat(ic.highBound)-Float.parseFloat(ic.lowBound))/2)));
	            	String lowStr = Float.parseFloat(ic.highBound) >= 2 ? ic.lowBound.replaceFirst("\\.0*$|(\\.\\d*?)0+$", "$1") : ic.lowBound;
	            	String highStr = Float.parseFloat(ic.highBound) >= 2 ? ic.highBound.replaceFirst("\\.0*$|(\\.\\d*?)0+$", "$1") : ic.highBound;
	            	midStr = Float.parseFloat(ic.highBound) >= 2 ? midStr.replaceFirst("\\.0*$|(\\.\\d*?)0+$", "$1") : midStr;
	        		writePDFText(contentStream, lowStr, 4, PDF_FONT_BOLD, leftPos+2, vertPos, true);
	        		writePDFText(contentStream, midStr, 4, PDF_FONT_BOLD, midPos, vertPos, true);
	        		writePDFText(contentStream, highStr, 4, PDF_FONT_BOLD, rightPos-2, vertPos, true);
	        		vertPos -= 8;
	            } else {
	            	if (containsBar) vertPos -= 11;
	            }
	            PDImageXObject  pdImageClassXObjectR = LosslessFactory.createFromImage(doc, ic.classImage);
	            contentStream.drawImage(pdImageClassXObjectR, colStartPos, posArray[PDF_ROW_POS], classHeight - 1, mapHeight);
            	String covName = ic.name;
    			covName = covName.length() > 20 ? covName.substring(0, 20)+"..." : covName;
	    		writePDFText(contentStream, covName, 5, PDF_FONT_BOLD, midPos, vertPos, true);
            	colStartPos += classHeight;
            }
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.drawRowCovariates: " + ex.toString());
	        ex.printStackTrace();
		} 
        return posArray;
	}

	public int[] drawRowTopItems(PDDocument doc, PDPageContentStream contentStream, ImportData iData, int[] posArray) {
        try {
	       int colStartPos = posArray[PDF_COL_POS] + PDF_MAP_SIZE + 1;
	        BufferedImage bI = iData.rowData.topItemImage;
	        int matrixLen = iData.matrixFiles.get(0).rows;  
	        PDImageXObject  pdImageClassXObjectR = LosslessFactory.createFromImage(doc, bI);
	        contentStream.drawImage(pdImageClassXObjectR, colStartPos, posArray[PDF_ROW_POS], PDF_CLASS_HEIGHT*2, PDF_MAP_SIZE);
	        Float increment = new Float(PDF_MAP_SIZE) / new Float(matrixLen-1);
	        int startRowPosition = posArray[PDF_ROW_POS] + PDF_MAP_SIZE;
	        for (int i = 0; i < iData.rowData.topItemsLines.size(); i++) {
		        String itemVal = (String) iData.rowData.topItemsLines.get(i)[2];
		        int textLoc = Math.round(((int)iData.rowData.topItemsLines.get(i)[1])*increment)+2 - (increment.intValue()/2);
		        if (itemVal != null) {
			        writePDFText(contentStream, itemVal, 5, PDF_FONT_BOLD, colStartPos+17, startRowPosition - textLoc, false);
		        }
	        }
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.drawRowTopItems: " + ex.toString());
	        ex.printStackTrace();
		} 
        return posArray;
	}
	
	public int[] drawAllRowLabels(PDDocument doc, PDPageContentStream contentStream, ImportData iData, int[] posArray, int mapWidth, int mapHeight) {
        try {
	       int colStartPos = posArray[PDF_COL_POS] + mapWidth + 1;
	        int startRowPosition = posArray[PDF_ROW_POS] + mapHeight;
	        for (int i = 0; i < iData.rowData.classArray.length; i++) {
		        String itemVal = iData.rowData.classArray[i];
		        if (itemVal != null) {
		    		int pipeIdx = itemVal.indexOf(PIPE);
		    		if (pipeIdx > 0) {
				        itemVal = itemVal.substring(0,itemVal.indexOf(PIPE));
		    		}
		        }
		        int textLoc = i*5 - 1;
		        if (itemVal != null && itemVal != CUT_VALUE) {
			        writePDFText(contentStream, itemVal, 5, PDF_FONT_BOLD, colStartPos, startRowPosition - textLoc, false);
		        }
	        }
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.drawRowTopItems: " + ex.toString());
	        ex.printStackTrace();
		} 
        return posArray;
	}
	
	public int[] drawColTopItems(PDDocument doc, PDPageContentStream contentStream, ImportData iData, int[] posArray) {
        try {
			int colStartPos = posArray[PDF_COL_POS];
	        int rowStartPos = (posArray[PDF_ROW_POS] - PDF_CLASS_HEIGHT*3) - 1;
	        int matrixLen = iData.matrixFiles.get(0).cols;  
	        BufferedImage bI = iData.colData.topItemImage;
	        PDImageXObject  pdImageClassXObjectR = LosslessFactory.createFromImage(doc, bI);
	        contentStream.drawImage(pdImageClassXObjectR, colStartPos, rowStartPos, PDF_MAP_SIZE, PDF_CLASS_HEIGHT*3);
	        Float increment = new Float(PDF_MAP_SIZE) / new Float(matrixLen-1);
	        int startColPosition = posArray[PDF_COL_POS];
	        for (int i = 0; i < iData.colData.topItemsLines.size(); i++) {
		        String itemVal = (String) iData.colData.topItemsLines.get(i)[2];
		        int textLoc = Math.round(((int)iData.colData.topItemsLines.get(i)[1])*increment)-2 - (increment.intValue()/2);
		        if (itemVal != null) {
			        writePDFText(contentStream, itemVal, 5, PDF_FONT_BOLD, startColPosition+textLoc, rowStartPos-2, true);
		        } 
	        }
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.drawColTopItems: " + ex.toString());
	        ex.printStackTrace();
		} 
        return posArray;
	}
	
	public int[] drawAllColLabels(PDDocument doc, PDPageContentStream contentStream, ImportData iData, int[] posArray) {
        try {
	        int rowStartPos = (posArray[PDF_ROW_POS]) - 1;
	        int startColPosition = posArray[PDF_COL_POS];
	        for (int i = 0; i < iData.colData.classArray.length; i++) {
		        String itemVal = (String) iData.colData.classArray[i];
		        if (itemVal != null) {
		    		int pipeIdx = itemVal.indexOf(PIPE);
		    		if (pipeIdx > 0) {
				        itemVal = itemVal.substring(0,itemVal.indexOf(PIPE));
		    		}
		        }
		        int textLoc = Math.round((int)i*5)-5;
		        if (itemVal != null && itemVal != CUT_VALUE) {
			        writePDFText(contentStream, itemVal, 5, PDF_FONT_BOLD, startColPosition+textLoc, rowStartPos, true);
		        } 
	        }
		} catch (Exception ex) {
			System.out.println("Exception in PdfGenerator.drawColTopItems: " + ex.toString());
	        ex.printStackTrace();
		} 
        return posArray;
	}
	
	/*******************************************************************
	 * METHOD: writePDFText
	 *
	 * This is a helper method that writes text on the PDF page at a 
	 * given location.
	 ******************************************************************/
	public void writePDFText(PDPageContentStream contentStream, String text, int fontSize, PDFont font, int startX, int startY, boolean rotate) {
		try {
			contentStream.beginText();
			contentStream.setFont(PDF_FONT, fontSize);
			contentStream.newLineAtOffset(startX, startY);
			if (rotate) {
				contentStream.setTextRotation(-20.42, startX, startY);
			}
			
		   StringBuilder sb = new StringBuilder();
		   for (int i=0; i<text.length(); i++) {
				Character c = text.charAt(i);
				if (Character.UnicodeBlock.of(c) != Character.UnicodeBlock.BASIC_LATIN) {
					System.out.println(" PDFBox: Unprintable character found in text: " + text + ". Converting to ??.");
					sb.append("??");
				} else {
					sb.append(c);
				}
			}
		    String textStr = sb.toString();
			contentStream.showText(textStr);
			contentStream.endText();
		} catch (Exception ex) {
			try {
				contentStream.endText();
			} catch (Exception e) {
				System.out.println("Eating that exception");
			}
			System.out.println("Exception in PdfGenerator.writePDFText: " + ex.toString());
	        ex.printStackTrace();
		} 
	}
}
